# Extension to .bashrc profile
# Source this file from the end of ~/.bashrc


# Test this has been sourced
alias dottest='echo "bashrc_ext was sourced"'

# Disable Flow control in terminal (Ctrl-S & Ctrl-Q)
stty -ixon

# `fd` already taken, create a convenient alias for the search tool:
alias fd=fdfind

# Disable bell sound
set bell-style none

# SET COLORS
# https://misc.flogisoft.com/bash/tip_colors_and_formatting
# Note the definition of basic colors, e.g. what kind of blue blue is, is
# dependant on the terminal, not on the shell! See windows terminal explanation
# for more details.

# Prompt Color
# \u               = username
# \h               = hostname short
# \H               = hostname long
# \w               = directory
# \033 = \x1B = \e = escape character
# \e[ ... m        = colour escape sequence

Foreground (text)
Code	Color	     
39	Default      
30	Black	     
31	Red	     
32	Green	     
33	Yellow	     
34	Blue	     
35	Magenta	     
36	Cyan	     
37	Lightgray    
90	Darkgray     
91	Lightred     
92	Lightgreen   
93	Lightyellow  
94	Lightblue    
95	Lightmagenta 
96	Lightcyan    
97	White
# Default (refer to .bashrc)
# PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;33m\]\w\[\033[00m\]\$ '
  PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;33m\]\w\[\033[00m\]\$ '
  PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\e[01;32m\]\u@\h\[\e[00m\]:\[\e[01;33m\]\w\[\e[00m\]\$ '
  BG='\e[48;5;242m'
  BG='\e[38;5;242m'
  PS1="$BG"'\u'
# Created with http://bashrcgenerator.com/
#  PS1="\[\033[38;5;3m\]\u\[$(tput sgr0)\]\[\033[38;5;7m\]@\[$(tput sgr0)\]\[\033[38;5;3m\]\h\[$(tput sgr0)\]\[\033[38;5;7m\]:\[$(tput sgr0)\]\[\033[38;5;11m\]\w\[$(tput sgr0)\]\[\033[38;5;7m\]\\$\[$(tput sgr0)\]"
#  PS1="\[\033[38;5;0m\]\[\033[48;5;15m\]\u\[$(tput sgr0)\]\[\033[38;5;8m\]@\[$(tput sgr0)\]\[\033[38;5;0m\]\h\[$(tput sgr0)\]\[\033[38;5;8m\]:\[$(tput sgr0)\]\[\033[38;5;2m\]\w\[$(tput sgr0)\]\[\033[38;5;8m\]\\$\[$(tput sgr0)\]"
#  PS1="\[\033[38;5;0m\]\[\033[48;5;8m\]\u\[$(tput sgr0)\]\[\033[38;5;8m\]\[\033[48;5;15m\]@\[$(tput sgr0)\]\[\033[38;5;1m\]\[\033[48;5;8m\]\h\[$(tput sgr0)\]\[\033[38;5;8m\]\[\033[48;5;15m\]:\[$(tput sgr0)\]\[\033[38;5;2m\]\w\[$(tput sgr0)\]\[\033[38;5;8m\]\\$\[$(tput sgr0)\]"
# LS COLORS
# ---------
# dircolors --help
#
# Print a list listing of what the colours mean:
#     dircolors -p
#
# Manual:
#     man dir_colors
#
# Item prefixes
# -------------
# no:global default
# fi:normal file
# di:directory
# ln:symbolic link
# pi:named pipe
# so:socket
# do:door
# bd:block device
# cd:character device
# or:orphan symlink
# mi:missing file
# su:set uid
# sg:set gid
# tw:sticky other writable
# ow:other writable
# st:sticky
# ex:executable
# Change BASH dir colour to something more readable
# To use 256 colors use 38;5;FG;48;5;BG
#   where FG = foreground 256 color number, and similarly for BG.
# LS_COLORS=$LS_COLORS':di=38;5;255;48;5;58:' ; export LS_COLORS
DI='di=38;5;255;48;5;58'
LS_COLORS=$LS_COLORS:$DI: ; export LS_COLORS


# SET UP SSH-AGENT
#------------------
# Refer to: https://docstore.mik.ua/orelly/networking_2ndEd/ssh/ch06_03.htm
#
# Automatically shutdown the agent when logging out so don't have handing
# SSH agents in memory with the keys.
trap '
    test -n "$SSH_AGENT_PID" && eval `ssh-agent -k` ;
' 0

# https://docstore.mik.ua/orelly/networking_2ndEd/ssh/ch06_03.htm
# What purpose does the eval serve? Well, when ssh-agent runs, it not only forks
# itself in the background, it also outputs some shell commands to set several
# environment variables necessary for using the agent.
# The variables are:
#   SSH_AUTH_SOCK (for SSH1 and OpenSSH) or SSH2_AUTH_SOCK (SSH2)
#   SSH_AGENT_PID (SSH1, OpenSSH) or SSH2_AGENT_PID (SSH2)
eval `ssh-agent`


# SYMLINK REQUIRED FILES
#-----------------------
function symlink_if_required  {
    # $1 = File to check exists
    # $2 = Source file to link if file doesnt exist
    [ ! -e $1 ] && {
        echo "Symlinking '$2' to '$1'"
        ln -s $2 $1
    }
}
symlink_if_required ~/.profile ~/.config/bash/.profile

# COPY TEMP FILES
#----------------
function copy_temp_file   {
    # $1 = File to check exists
    # $2 = Source file to link if file doesnt exist
    [ ! -e $1 ] && {
        echo "Copying '$2' to '$1'"
        cp $2 $1
    }
}
copy_temp_file ~/.ssh/config ~/.config/ssh/config
